- name: Solana validator infra
  hosts: validators
  become: true

  vars:
    # swap vars
    swap_file_path: /swapfile
    swap_file_size_mb: '102400' # 100G, must be exact megabytes -> https://www.gbmb.org/gb-to-mb
    swap_swappiness: '1'
    # services vars
    services_on_boot:
      - "validator.service"
      - "systuner.service"

  roles:
    # role to handle swap files. source: https://galaxy.ansible.com/geerlingguy/swap
    - geerlingguy.swap

  tasks:
    - name: Ping validators hosts
      ansible.builtin.ping:

    - name: Upgrade all apt packages
      ansible.builtin.apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400

    - name: Create ramdisk and mount to fstab
      ansible.posix.mount:
        path: /mnt/ramdisk
        src: tmpfs
        fstype: tmpfs
        opts: rw,noexec,nodev,nosuid,noatime,size=100G,user=sol
        state: mounted

    - name: Install solana
      ansible.builtin.shell: sh -c "$(curl -sSfL https://release.solana.com/v1.14.12/install)"

    - name: Add user 'sol'
      ansible.builtin.user:
        name: sol

    - name: Copy start-validator script
      become_user: sol
      ansible.builtin.copy:
        src: ./scripts/start-validator.sh
        dest: ~/start-validator.sh
        owner: sol
        group: sol
        mode: '0755'

    - name: Create log folder, if it does not exist
      become_user: sol
      ansible.builtin.file:
        path: ~/log
        state: directory
        mode: '0755'

    - name: Copy systuner service
      ansible.builtin.copy:
        src: ./services/systuner.service
        dest: /etc/systemd/system/systuner.service
        owner: root
        group: root
        mode: '0755'

    - name: Copy validator service
      ansible.builtin.copy:
        src: ./services/validator.service
        dest: /etc/systemd/system/validator.service
        owner: root
        group: root
        mode: '0755'

    # This collects services and expose them into ansible_facts.services
    - name: Populate service facts
      ansible.builtin.service_facts:
    # # This debugs what services are available on the remote machine
    # - name: Print service facts
    #   ansible.builtin.debug:
    #     var: ansible_facts.services

    - name: enable new services on boot
      ansible.builtin.service:
        name: "{{ item }}"
        enabled: true
        state: started
      when: "item in ansible_facts.services"
      with_items: '{{ services_on_boot }}'

    - name: Reboot the machine with all defaults
      ansible.builtin.reboot:
